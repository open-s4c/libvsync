/*
 * Copyright (C) Huawei Technologies Co., Ltd. 2024. All rights reserved.
 * SPDX-License-Identifier: MIT
 */

#ifndef VATOMIC_ARM64_LSE_H
#define VATOMIC_ARM64_LSE_H
/* !!!Warning: File generated by tmpl; DO NOT EDIT.!!! */

/*******************************************************************************
 * options
 ******************************************************************************/
#if !defined(VATOMIC_ARM64_LSE)
    #error "Don't include this file directly, include <vsync/atomic.h> instead"
#endif
// of the value held in a register on it

/******************************************************************************
 * vatomic32_xchg
 ******************************************************************************/
#ifndef VATOMIC32_XCHG
    #define VATOMIC32_XCHG
static inline vuint32_t
vatomic32_xchg(vatomic32_t *a, vuint32_t v)
{
    vuint32_t oldv;
    __asm__ volatile("swpal %w[newv], %w[oldv], %[a]\n"
                     : [oldv] "=&r"(oldv)
                     : [newv] "r"(v), [a] "Q"(a->_v)
                     : "memory");
    return oldv;
}
#endif
/******************************************************************************
 * vatomic32_xchg_acq
 ******************************************************************************/
#ifndef VATOMIC32_XCHG_ACQ
    #define VATOMIC32_XCHG_ACQ
static inline vuint32_t
vatomic32_xchg_acq(vatomic32_t *a, vuint32_t v)
{
    vuint32_t oldv;
    __asm__ volatile("swpa %w[newv], %w[oldv], %[a]\n"
                     : [oldv] "=&r"(oldv)
                     : [newv] "r"(v), [a] "Q"(a->_v)
                     : "memory");
    return oldv;
}
#endif
/******************************************************************************
 * vatomic32_xchg_rel
 ******************************************************************************/
#ifndef VATOMIC32_XCHG_REL
    #define VATOMIC32_XCHG_REL
static inline vuint32_t
vatomic32_xchg_rel(vatomic32_t *a, vuint32_t v)
{
    vuint32_t oldv;
    __asm__ volatile("swpl %w[newv], %w[oldv], %[a]\n"
                     : [oldv] "=&r"(oldv)
                     : [newv] "r"(v), [a] "Q"(a->_v)
                     : "memory");
    return oldv;
}
#endif
/******************************************************************************
 * vatomic32_xchg_rlx
 ******************************************************************************/
#ifndef VATOMIC32_XCHG_RLX
    #define VATOMIC32_XCHG_RLX
static inline vuint32_t
vatomic32_xchg_rlx(vatomic32_t *a, vuint32_t v)
{
    vuint32_t oldv;
    __asm__ volatile("swp %w[newv], %w[oldv], %[a]\n"
                     : [oldv] "=&r"(oldv)
                     : [newv] "r"(v), [a] "Q"(a->_v)
                     : "memory");
    return oldv;
}
#endif
/******************************************************************************
 * vatomic64_xchg
 ******************************************************************************/
#ifndef VATOMIC64_XCHG
    #define VATOMIC64_XCHG
static inline vuint64_t
vatomic64_xchg(vatomic64_t *a, vuint64_t v)
{
    vuint64_t oldv;
    __asm__ volatile("swpal %x[newv], %x[oldv], %[a]\n"
                     : [oldv] "=&r"(oldv)
                     : [newv] "r"(v), [a] "Q"(a->_v)
                     : "memory");
    return oldv;
}
#endif
/******************************************************************************
 * vatomic64_xchg_acq
 ******************************************************************************/
#ifndef VATOMIC64_XCHG_ACQ
    #define VATOMIC64_XCHG_ACQ
static inline vuint64_t
vatomic64_xchg_acq(vatomic64_t *a, vuint64_t v)
{
    vuint64_t oldv;
    __asm__ volatile("swpa %x[newv], %x[oldv], %[a]\n"
                     : [oldv] "=&r"(oldv)
                     : [newv] "r"(v), [a] "Q"(a->_v)
                     : "memory");
    return oldv;
}
#endif
/******************************************************************************
 * vatomic64_xchg_rel
 ******************************************************************************/
#ifndef VATOMIC64_XCHG_REL
    #define VATOMIC64_XCHG_REL
static inline vuint64_t
vatomic64_xchg_rel(vatomic64_t *a, vuint64_t v)
{
    vuint64_t oldv;
    __asm__ volatile("swpl %x[newv], %x[oldv], %[a]\n"
                     : [oldv] "=&r"(oldv)
                     : [newv] "r"(v), [a] "Q"(a->_v)
                     : "memory");
    return oldv;
}
#endif
/******************************************************************************
 * vatomic64_xchg_rlx
 ******************************************************************************/
#ifndef VATOMIC64_XCHG_RLX
    #define VATOMIC64_XCHG_RLX
static inline vuint64_t
vatomic64_xchg_rlx(vatomic64_t *a, vuint64_t v)
{
    vuint64_t oldv;
    __asm__ volatile("swp %x[newv], %x[oldv], %[a]\n"
                     : [oldv] "=&r"(oldv)
                     : [newv] "r"(v), [a] "Q"(a->_v)
                     : "memory");
    return oldv;
}
#endif
/******************************************************************************
 * vatomicptr_xchg
 ******************************************************************************/
#ifndef VATOMICPTR_XCHG
    #define VATOMICPTR_XCHG
static inline void *
vatomicptr_xchg(vatomicptr_t *a, void *v)
{
    void *oldv;
    __asm__ volatile("swpal %x[newv], %x[oldv], %[a]\n"
                     : [oldv] "=&r"(oldv)
                     : [newv] "r"(v), [a] "Q"(a->_v)
                     : "memory");
    return oldv;
}
#endif
/******************************************************************************
 * vatomicptr_xchg_acq
 ******************************************************************************/
#ifndef VATOMICPTR_XCHG_ACQ
    #define VATOMICPTR_XCHG_ACQ
static inline void *
vatomicptr_xchg_acq(vatomicptr_t *a, void *v)
{
    void *oldv;
    __asm__ volatile("swpa %x[newv], %x[oldv], %[a]\n"
                     : [oldv] "=&r"(oldv)
                     : [newv] "r"(v), [a] "Q"(a->_v)
                     : "memory");
    return oldv;
}
#endif
/******************************************************************************
 * vatomicptr_xchg_rel
 ******************************************************************************/
#ifndef VATOMICPTR_XCHG_REL
    #define VATOMICPTR_XCHG_REL
static inline void *
vatomicptr_xchg_rel(vatomicptr_t *a, void *v)
{
    void *oldv;
    __asm__ volatile("swpl %x[newv], %x[oldv], %[a]\n"
                     : [oldv] "=&r"(oldv)
                     : [newv] "r"(v), [a] "Q"(a->_v)
                     : "memory");
    return oldv;
}
#endif
/******************************************************************************
 * vatomicptr_xchg_rlx
 ******************************************************************************/
#ifndef VATOMICPTR_XCHG_RLX
    #define VATOMICPTR_XCHG_RLX
static inline void *
vatomicptr_xchg_rlx(vatomicptr_t *a, void *v)
{
    void *oldv;
    __asm__ volatile("swp %x[newv], %x[oldv], %[a]\n"
                     : [oldv] "=&r"(oldv)
                     : [newv] "r"(v), [a] "Q"(a->_v)
                     : "memory");
    return oldv;
}
#endif
/******************************************************************************
 * vatomic32_cmpxchg
 ******************************************************************************/
#ifndef VATOMIC32_CMPXCHG
    #define VATOMIC32_CMPXCHG
static inline vuint32_t
vatomic32_cmpxchg(vatomic32_t *a, vuint32_t e, vuint32_t v)
{
    vuint32_t oldv;
    __asm__ volatile(
        "mov %w[oldv], %w[exp]\n"
        "casal %w[oldv], %w[newv], %[a]\n"
        : [oldv] "=&r"(oldv)
        : [newv] "r"(v), [exp] "r"(e), [a] "Q"(a->_v)
        : "memory", "cc");
    return oldv;
}
#endif
/******************************************************************************
 * vatomic32_cmpxchg_acq
 ******************************************************************************/
#ifndef VATOMIC32_CMPXCHG_ACQ
    #define VATOMIC32_CMPXCHG_ACQ
static inline vuint32_t
vatomic32_cmpxchg_acq(vatomic32_t *a, vuint32_t e, vuint32_t v)
{
    vuint32_t oldv;
    __asm__ volatile(
        "mov %w[oldv], %w[exp]\n"
        "casa %w[oldv], %w[newv], %[a]\n"
        : [oldv] "=&r"(oldv)
        : [newv] "r"(v), [exp] "r"(e), [a] "Q"(a->_v)
        : "memory", "cc");
    return oldv;
}
#endif
/******************************************************************************
 * vatomic32_cmpxchg_rel
 ******************************************************************************/
#ifndef VATOMIC32_CMPXCHG_REL
    #define VATOMIC32_CMPXCHG_REL
static inline vuint32_t
vatomic32_cmpxchg_rel(vatomic32_t *a, vuint32_t e, vuint32_t v)
{
    vuint32_t oldv;
    __asm__ volatile(
        "mov %w[oldv], %w[exp]\n"
        "casl %w[oldv], %w[newv], %[a]\n"
        : [oldv] "=&r"(oldv)
        : [newv] "r"(v), [exp] "r"(e), [a] "Q"(a->_v)
        : "memory", "cc");
    return oldv;
}
#endif
/******************************************************************************
 * vatomic32_cmpxchg_rlx
 ******************************************************************************/
#ifndef VATOMIC32_CMPXCHG_RLX
    #define VATOMIC32_CMPXCHG_RLX
static inline vuint32_t
vatomic32_cmpxchg_rlx(vatomic32_t *a, vuint32_t e, vuint32_t v)
{
    vuint32_t oldv;
    __asm__ volatile(
        "mov %w[oldv], %w[exp]\n"
        "cas %w[oldv], %w[newv], %[a]\n"
        : [oldv] "=&r"(oldv)
        : [newv] "r"(v), [exp] "r"(e), [a] "Q"(a->_v)
        : "memory", "cc");
    return oldv;
}
#endif
/******************************************************************************
 * vatomic64_cmpxchg
 ******************************************************************************/
#ifndef VATOMIC64_CMPXCHG
    #define VATOMIC64_CMPXCHG
static inline vuint64_t
vatomic64_cmpxchg(vatomic64_t *a, vuint64_t e, vuint64_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "mov %x[oldv], %x[exp]\n"
        "casal %x[oldv], %x[newv], %[a]\n"
        : [oldv] "=&r"(oldv)
        : [newv] "r"(v), [exp] "r"(e), [a] "Q"(a->_v)
        : "memory", "cc");
    return oldv;
}
#endif
/******************************************************************************
 * vatomic64_cmpxchg_acq
 ******************************************************************************/
#ifndef VATOMIC64_CMPXCHG_ACQ
    #define VATOMIC64_CMPXCHG_ACQ
static inline vuint64_t
vatomic64_cmpxchg_acq(vatomic64_t *a, vuint64_t e, vuint64_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "mov %x[oldv], %x[exp]\n"
        "casa %x[oldv], %x[newv], %[a]\n"
        : [oldv] "=&r"(oldv)
        : [newv] "r"(v), [exp] "r"(e), [a] "Q"(a->_v)
        : "memory", "cc");
    return oldv;
}
#endif
/******************************************************************************
 * vatomic64_cmpxchg_rel
 ******************************************************************************/
#ifndef VATOMIC64_CMPXCHG_REL
    #define VATOMIC64_CMPXCHG_REL
static inline vuint64_t
vatomic64_cmpxchg_rel(vatomic64_t *a, vuint64_t e, vuint64_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "mov %x[oldv], %x[exp]\n"
        "casl %x[oldv], %x[newv], %[a]\n"
        : [oldv] "=&r"(oldv)
        : [newv] "r"(v), [exp] "r"(e), [a] "Q"(a->_v)
        : "memory", "cc");
    return oldv;
}
#endif
/******************************************************************************
 * vatomic64_cmpxchg_rlx
 ******************************************************************************/
#ifndef VATOMIC64_CMPXCHG_RLX
    #define VATOMIC64_CMPXCHG_RLX
static inline vuint64_t
vatomic64_cmpxchg_rlx(vatomic64_t *a, vuint64_t e, vuint64_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "mov %x[oldv], %x[exp]\n"
        "cas %x[oldv], %x[newv], %[a]\n"
        : [oldv] "=&r"(oldv)
        : [newv] "r"(v), [exp] "r"(e), [a] "Q"(a->_v)
        : "memory", "cc");
    return oldv;
}
#endif
/******************************************************************************
 * vatomicptr_cmpxchg
 ******************************************************************************/
#ifndef VATOMICPTR_CMPXCHG
    #define VATOMICPTR_CMPXCHG
static inline void *
vatomicptr_cmpxchg(vatomicptr_t *a, void *e, void *v)
{
    void *oldv;
    __asm__ volatile(
        "mov %x[oldv], %x[exp]\n"
        "casal %x[oldv], %x[newv], %[a]\n"
        : [oldv] "=&r"(oldv)
        : [newv] "r"(v), [exp] "r"(e), [a] "Q"(a->_v)
        : "memory", "cc");
    return oldv;
}
#endif
/******************************************************************************
 * vatomicptr_cmpxchg_acq
 ******************************************************************************/
#ifndef VATOMICPTR_CMPXCHG_ACQ
    #define VATOMICPTR_CMPXCHG_ACQ
static inline void *
vatomicptr_cmpxchg_acq(vatomicptr_t *a, void *e, void *v)
{
    void *oldv;
    __asm__ volatile(
        "mov %x[oldv], %x[exp]\n"
        "casa %x[oldv], %x[newv], %[a]\n"
        : [oldv] "=&r"(oldv)
        : [newv] "r"(v), [exp] "r"(e), [a] "Q"(a->_v)
        : "memory", "cc");
    return oldv;
}
#endif
/******************************************************************************
 * vatomicptr_cmpxchg_rel
 ******************************************************************************/
#ifndef VATOMICPTR_CMPXCHG_REL
    #define VATOMICPTR_CMPXCHG_REL
static inline void *
vatomicptr_cmpxchg_rel(vatomicptr_t *a, void *e, void *v)
{
    void *oldv;
    __asm__ volatile(
        "mov %x[oldv], %x[exp]\n"
        "casl %x[oldv], %x[newv], %[a]\n"
        : [oldv] "=&r"(oldv)
        : [newv] "r"(v), [exp] "r"(e), [a] "Q"(a->_v)
        : "memory", "cc");
    return oldv;
}
#endif
/******************************************************************************
 * vatomicptr_cmpxchg_rlx
 ******************************************************************************/
#ifndef VATOMICPTR_CMPXCHG_RLX
    #define VATOMICPTR_CMPXCHG_RLX
static inline void *
vatomicptr_cmpxchg_rlx(vatomicptr_t *a, void *e, void *v)
{
    void *oldv;
    __asm__ volatile(
        "mov %x[oldv], %x[exp]\n"
        "cas %x[oldv], %x[newv], %[a]\n"
        : [oldv] "=&r"(oldv)
        : [newv] "r"(v), [exp] "r"(e), [a] "Q"(a->_v)
        : "memory", "cc");
    return oldv;
}
#endif
/******************************************************************************
 * vatomic32_get_max
 ******************************************************************************/
#ifndef VATOMIC32_GET_MAX
    #define VATOMIC32_GET_MAX
static inline vuint32_t
vatomic32_get_max(vatomic32_t *a, vuint32_t v)
{
    vuint32_t oldv;
    __asm__ volatile("ldumaxal %w[v], %w[oldv], %[a]\n"
                     : [oldv] "=&r"(oldv), [v] "+&r"(v)
                     : [a] "Q"(a->_v)
                     : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic32_get_max_acq
 ******************************************************************************/
#ifndef VATOMIC32_GET_MAX_ACQ
    #define VATOMIC32_GET_MAX_ACQ
static inline vuint32_t
vatomic32_get_max_acq(vatomic32_t *a, vuint32_t v)
{
    vuint32_t oldv;
    __asm__ volatile("ldumaxa %w[v], %w[oldv], %[a]\n"
                     : [oldv] "=&r"(oldv), [v] "+&r"(v)
                     : [a] "Q"(a->_v)
                     : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic32_get_max_rel
 ******************************************************************************/
#ifndef VATOMIC32_GET_MAX_REL
    #define VATOMIC32_GET_MAX_REL
static inline vuint32_t
vatomic32_get_max_rel(vatomic32_t *a, vuint32_t v)
{
    vuint32_t oldv;
    __asm__ volatile("ldumaxl %w[v], %w[oldv], %[a]\n"
                     : [oldv] "=&r"(oldv), [v] "+&r"(v)
                     : [a] "Q"(a->_v)
                     : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic32_get_max_rlx
 ******************************************************************************/
#ifndef VATOMIC32_GET_MAX_RLX
    #define VATOMIC32_GET_MAX_RLX
static inline vuint32_t
vatomic32_get_max_rlx(vatomic32_t *a, vuint32_t v)
{
    vuint32_t oldv;
    __asm__ volatile("ldumax %w[v], %w[oldv], %[a]\n"
                     : [oldv] "=&r"(oldv), [v] "+&r"(v)
                     : [a] "Q"(a->_v)
                     : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic64_get_max
 ******************************************************************************/
#ifndef VATOMIC64_GET_MAX
    #define VATOMIC64_GET_MAX
static inline vuint64_t
vatomic64_get_max(vatomic64_t *a, vuint64_t v)
{
    vuint64_t oldv;
    __asm__ volatile("ldumaxal %x[v], %x[oldv], %[a]\n"
                     : [oldv] "=&r"(oldv), [v] "+&r"(v)
                     : [a] "Q"(a->_v)
                     : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic64_get_max_acq
 ******************************************************************************/
#ifndef VATOMIC64_GET_MAX_ACQ
    #define VATOMIC64_GET_MAX_ACQ
static inline vuint64_t
vatomic64_get_max_acq(vatomic64_t *a, vuint64_t v)
{
    vuint64_t oldv;
    __asm__ volatile("ldumaxa %x[v], %x[oldv], %[a]\n"
                     : [oldv] "=&r"(oldv), [v] "+&r"(v)
                     : [a] "Q"(a->_v)
                     : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic64_get_max_rel
 ******************************************************************************/
#ifndef VATOMIC64_GET_MAX_REL
    #define VATOMIC64_GET_MAX_REL
static inline vuint64_t
vatomic64_get_max_rel(vatomic64_t *a, vuint64_t v)
{
    vuint64_t oldv;
    __asm__ volatile("ldumaxl %x[v], %x[oldv], %[a]\n"
                     : [oldv] "=&r"(oldv), [v] "+&r"(v)
                     : [a] "Q"(a->_v)
                     : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic64_get_max_rlx
 ******************************************************************************/
#ifndef VATOMIC64_GET_MAX_RLX
    #define VATOMIC64_GET_MAX_RLX
static inline vuint64_t
vatomic64_get_max_rlx(vatomic64_t *a, vuint64_t v)
{
    vuint64_t oldv;
    __asm__ volatile("ldumax %x[v], %x[oldv], %[a]\n"
                     : [oldv] "=&r"(oldv), [v] "+&r"(v)
                     : [a] "Q"(a->_v)
                     : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic32_max
 ******************************************************************************/
#ifndef VATOMIC32_MAX
    #define VATOMIC32_MAX
static inline void
vatomic32_max(vatomic32_t *a, vuint32_t v)
{
    __asm__ volatile("stumaxl %w[v], %[a]\n"
                     : [v] "+&r"(v)
                     : [a] "Q"(a->_v)
                     : "memory", "cc");
}
#endif
/******************************************************************************
 * vatomic32_max_rel
 ******************************************************************************/
#ifndef VATOMIC32_MAX_REL
    #define VATOMIC32_MAX_REL
static inline void
vatomic32_max_rel(vatomic32_t *a, vuint32_t v)
{
    __asm__ volatile("stumaxl %w[v], %[a]\n"
                     : [v] "+&r"(v)
                     : [a] "Q"(a->_v)
                     : "memory", "cc");
}
#endif
/******************************************************************************
 * vatomic32_max_rlx
 ******************************************************************************/
#ifndef VATOMIC32_MAX_RLX
    #define VATOMIC32_MAX_RLX
static inline void
vatomic32_max_rlx(vatomic32_t *a, vuint32_t v)
{
    __asm__ volatile("stumax %w[v], %[a]\n"
                     : [v] "+&r"(v)
                     : [a] "Q"(a->_v)
                     : "memory", "cc");
}
#endif
/******************************************************************************
 * vatomic64_max
 ******************************************************************************/
#ifndef VATOMIC64_MAX
    #define VATOMIC64_MAX
static inline void
vatomic64_max(vatomic64_t *a, vuint64_t v)
{
    __asm__ volatile("stumaxl %x[v], %[a]\n"
                     : [v] "+&r"(v)
                     : [a] "Q"(a->_v)
                     : "memory", "cc");
}
#endif
/******************************************************************************
 * vatomic64_max_rel
 ******************************************************************************/
#ifndef VATOMIC64_MAX_REL
    #define VATOMIC64_MAX_REL
static inline void
vatomic64_max_rel(vatomic64_t *a, vuint64_t v)
{
    __asm__ volatile("stumaxl %x[v], %[a]\n"
                     : [v] "+&r"(v)
                     : [a] "Q"(a->_v)
                     : "memory", "cc");
}
#endif
/******************************************************************************
 * vatomic64_max_rlx
 ******************************************************************************/
#ifndef VATOMIC64_MAX_RLX
    #define VATOMIC64_MAX_RLX
static inline void
vatomic64_max_rlx(vatomic64_t *a, vuint64_t v)
{
    __asm__ volatile("stumax %x[v], %[a]\n"
                     : [v] "+&r"(v)
                     : [a] "Q"(a->_v)
                     : "memory", "cc");
}
#endif
/******************************************************************************
 * vatomic32_get_and
 ******************************************************************************/
#ifndef VATOMIC32_GET_AND
    #define VATOMIC32_GET_AND
static inline vuint32_t
vatomic32_get_and(vatomic32_t *a, vuint32_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "mvn %w[v], %w[v]\n"
        "ldclral %w[v], %w[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic32_get_or
 ******************************************************************************/
#ifndef VATOMIC32_GET_OR
    #define VATOMIC32_GET_OR
static inline vuint32_t
vatomic32_get_or(vatomic32_t *a, vuint32_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "\n"
        "ldsetal %w[v], %w[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic32_get_xor
 ******************************************************************************/
#ifndef VATOMIC32_GET_XOR
    #define VATOMIC32_GET_XOR
static inline vuint32_t
vatomic32_get_xor(vatomic32_t *a, vuint32_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "\n"
        "ldeoral %w[v], %w[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic32_get_add
 ******************************************************************************/
#ifndef VATOMIC32_GET_ADD
    #define VATOMIC32_GET_ADD
static inline vuint32_t
vatomic32_get_add(vatomic32_t *a, vuint32_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "\n"
        "ldaddal %w[v], %w[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic32_get_sub
 ******************************************************************************/
#ifndef VATOMIC32_GET_SUB
    #define VATOMIC32_GET_SUB
static inline vuint32_t
vatomic32_get_sub(vatomic32_t *a, vuint32_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "neg %w[v], %w[v]\n"
        "ldaddal %w[v], %w[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic32_get_and_acq
 ******************************************************************************/
#ifndef VATOMIC32_GET_AND_ACQ
    #define VATOMIC32_GET_AND_ACQ
static inline vuint32_t
vatomic32_get_and_acq(vatomic32_t *a, vuint32_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "mvn %w[v], %w[v]\n"
        "ldclra %w[v], %w[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic32_get_or_acq
 ******************************************************************************/
#ifndef VATOMIC32_GET_OR_ACQ
    #define VATOMIC32_GET_OR_ACQ
static inline vuint32_t
vatomic32_get_or_acq(vatomic32_t *a, vuint32_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "\n"
        "ldseta %w[v], %w[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic32_get_xor_acq
 ******************************************************************************/
#ifndef VATOMIC32_GET_XOR_ACQ
    #define VATOMIC32_GET_XOR_ACQ
static inline vuint32_t
vatomic32_get_xor_acq(vatomic32_t *a, vuint32_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "\n"
        "ldeora %w[v], %w[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic32_get_add_acq
 ******************************************************************************/
#ifndef VATOMIC32_GET_ADD_ACQ
    #define VATOMIC32_GET_ADD_ACQ
static inline vuint32_t
vatomic32_get_add_acq(vatomic32_t *a, vuint32_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "\n"
        "ldadda %w[v], %w[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic32_get_sub_acq
 ******************************************************************************/
#ifndef VATOMIC32_GET_SUB_ACQ
    #define VATOMIC32_GET_SUB_ACQ
static inline vuint32_t
vatomic32_get_sub_acq(vatomic32_t *a, vuint32_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "neg %w[v], %w[v]\n"
        "ldadda %w[v], %w[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic32_get_and_rel
 ******************************************************************************/
#ifndef VATOMIC32_GET_AND_REL
    #define VATOMIC32_GET_AND_REL
static inline vuint32_t
vatomic32_get_and_rel(vatomic32_t *a, vuint32_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "mvn %w[v], %w[v]\n"
        "ldclrl %w[v], %w[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic32_get_or_rel
 ******************************************************************************/
#ifndef VATOMIC32_GET_OR_REL
    #define VATOMIC32_GET_OR_REL
static inline vuint32_t
vatomic32_get_or_rel(vatomic32_t *a, vuint32_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "\n"
        "ldsetl %w[v], %w[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic32_get_xor_rel
 ******************************************************************************/
#ifndef VATOMIC32_GET_XOR_REL
    #define VATOMIC32_GET_XOR_REL
static inline vuint32_t
vatomic32_get_xor_rel(vatomic32_t *a, vuint32_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "\n"
        "ldeorl %w[v], %w[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic32_get_add_rel
 ******************************************************************************/
#ifndef VATOMIC32_GET_ADD_REL
    #define VATOMIC32_GET_ADD_REL
static inline vuint32_t
vatomic32_get_add_rel(vatomic32_t *a, vuint32_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "\n"
        "ldaddl %w[v], %w[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic32_get_sub_rel
 ******************************************************************************/
#ifndef VATOMIC32_GET_SUB_REL
    #define VATOMIC32_GET_SUB_REL
static inline vuint32_t
vatomic32_get_sub_rel(vatomic32_t *a, vuint32_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "neg %w[v], %w[v]\n"
        "ldaddl %w[v], %w[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic32_get_and_rlx
 ******************************************************************************/
#ifndef VATOMIC32_GET_AND_RLX
    #define VATOMIC32_GET_AND_RLX
static inline vuint32_t
vatomic32_get_and_rlx(vatomic32_t *a, vuint32_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "mvn %w[v], %w[v]\n"
        "ldclr %w[v], %w[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic32_get_or_rlx
 ******************************************************************************/
#ifndef VATOMIC32_GET_OR_RLX
    #define VATOMIC32_GET_OR_RLX
static inline vuint32_t
vatomic32_get_or_rlx(vatomic32_t *a, vuint32_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "\n"
        "ldset %w[v], %w[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic32_get_xor_rlx
 ******************************************************************************/
#ifndef VATOMIC32_GET_XOR_RLX
    #define VATOMIC32_GET_XOR_RLX
static inline vuint32_t
vatomic32_get_xor_rlx(vatomic32_t *a, vuint32_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "\n"
        "ldeor %w[v], %w[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic32_get_add_rlx
 ******************************************************************************/
#ifndef VATOMIC32_GET_ADD_RLX
    #define VATOMIC32_GET_ADD_RLX
static inline vuint32_t
vatomic32_get_add_rlx(vatomic32_t *a, vuint32_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "\n"
        "ldadd %w[v], %w[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic32_get_sub_rlx
 ******************************************************************************/
#ifndef VATOMIC32_GET_SUB_RLX
    #define VATOMIC32_GET_SUB_RLX
static inline vuint32_t
vatomic32_get_sub_rlx(vatomic32_t *a, vuint32_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "neg %w[v], %w[v]\n"
        "ldadd %w[v], %w[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic64_get_and
 ******************************************************************************/
#ifndef VATOMIC64_GET_AND
    #define VATOMIC64_GET_AND
static inline vuint64_t
vatomic64_get_and(vatomic64_t *a, vuint64_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "mvn %x[v], %x[v]\n"
        "ldclral %x[v], %x[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic64_get_or
 ******************************************************************************/
#ifndef VATOMIC64_GET_OR
    #define VATOMIC64_GET_OR
static inline vuint64_t
vatomic64_get_or(vatomic64_t *a, vuint64_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "\n"
        "ldsetal %x[v], %x[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic64_get_xor
 ******************************************************************************/
#ifndef VATOMIC64_GET_XOR
    #define VATOMIC64_GET_XOR
static inline vuint64_t
vatomic64_get_xor(vatomic64_t *a, vuint64_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "\n"
        "ldeoral %x[v], %x[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic64_get_add
 ******************************************************************************/
#ifndef VATOMIC64_GET_ADD
    #define VATOMIC64_GET_ADD
static inline vuint64_t
vatomic64_get_add(vatomic64_t *a, vuint64_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "\n"
        "ldaddal %x[v], %x[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic64_get_sub
 ******************************************************************************/
#ifndef VATOMIC64_GET_SUB
    #define VATOMIC64_GET_SUB
static inline vuint64_t
vatomic64_get_sub(vatomic64_t *a, vuint64_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "neg %x[v], %x[v]\n"
        "ldaddal %x[v], %x[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic64_get_and_acq
 ******************************************************************************/
#ifndef VATOMIC64_GET_AND_ACQ
    #define VATOMIC64_GET_AND_ACQ
static inline vuint64_t
vatomic64_get_and_acq(vatomic64_t *a, vuint64_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "mvn %x[v], %x[v]\n"
        "ldclra %x[v], %x[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic64_get_or_acq
 ******************************************************************************/
#ifndef VATOMIC64_GET_OR_ACQ
    #define VATOMIC64_GET_OR_ACQ
static inline vuint64_t
vatomic64_get_or_acq(vatomic64_t *a, vuint64_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "\n"
        "ldseta %x[v], %x[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic64_get_xor_acq
 ******************************************************************************/
#ifndef VATOMIC64_GET_XOR_ACQ
    #define VATOMIC64_GET_XOR_ACQ
static inline vuint64_t
vatomic64_get_xor_acq(vatomic64_t *a, vuint64_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "\n"
        "ldeora %x[v], %x[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic64_get_add_acq
 ******************************************************************************/
#ifndef VATOMIC64_GET_ADD_ACQ
    #define VATOMIC64_GET_ADD_ACQ
static inline vuint64_t
vatomic64_get_add_acq(vatomic64_t *a, vuint64_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "\n"
        "ldadda %x[v], %x[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic64_get_sub_acq
 ******************************************************************************/
#ifndef VATOMIC64_GET_SUB_ACQ
    #define VATOMIC64_GET_SUB_ACQ
static inline vuint64_t
vatomic64_get_sub_acq(vatomic64_t *a, vuint64_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "neg %x[v], %x[v]\n"
        "ldadda %x[v], %x[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic64_get_and_rel
 ******************************************************************************/
#ifndef VATOMIC64_GET_AND_REL
    #define VATOMIC64_GET_AND_REL
static inline vuint64_t
vatomic64_get_and_rel(vatomic64_t *a, vuint64_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "mvn %x[v], %x[v]\n"
        "ldclrl %x[v], %x[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic64_get_or_rel
 ******************************************************************************/
#ifndef VATOMIC64_GET_OR_REL
    #define VATOMIC64_GET_OR_REL
static inline vuint64_t
vatomic64_get_or_rel(vatomic64_t *a, vuint64_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "\n"
        "ldsetl %x[v], %x[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic64_get_xor_rel
 ******************************************************************************/
#ifndef VATOMIC64_GET_XOR_REL
    #define VATOMIC64_GET_XOR_REL
static inline vuint64_t
vatomic64_get_xor_rel(vatomic64_t *a, vuint64_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "\n"
        "ldeorl %x[v], %x[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic64_get_add_rel
 ******************************************************************************/
#ifndef VATOMIC64_GET_ADD_REL
    #define VATOMIC64_GET_ADD_REL
static inline vuint64_t
vatomic64_get_add_rel(vatomic64_t *a, vuint64_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "\n"
        "ldaddl %x[v], %x[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic64_get_sub_rel
 ******************************************************************************/
#ifndef VATOMIC64_GET_SUB_REL
    #define VATOMIC64_GET_SUB_REL
static inline vuint64_t
vatomic64_get_sub_rel(vatomic64_t *a, vuint64_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "neg %x[v], %x[v]\n"
        "ldaddl %x[v], %x[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic64_get_and_rlx
 ******************************************************************************/
#ifndef VATOMIC64_GET_AND_RLX
    #define VATOMIC64_GET_AND_RLX
static inline vuint64_t
vatomic64_get_and_rlx(vatomic64_t *a, vuint64_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "mvn %x[v], %x[v]\n"
        "ldclr %x[v], %x[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic64_get_or_rlx
 ******************************************************************************/
#ifndef VATOMIC64_GET_OR_RLX
    #define VATOMIC64_GET_OR_RLX
static inline vuint64_t
vatomic64_get_or_rlx(vatomic64_t *a, vuint64_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "\n"
        "ldset %x[v], %x[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic64_get_xor_rlx
 ******************************************************************************/
#ifndef VATOMIC64_GET_XOR_RLX
    #define VATOMIC64_GET_XOR_RLX
static inline vuint64_t
vatomic64_get_xor_rlx(vatomic64_t *a, vuint64_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "\n"
        "ldeor %x[v], %x[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic64_get_add_rlx
 ******************************************************************************/
#ifndef VATOMIC64_GET_ADD_RLX
    #define VATOMIC64_GET_ADD_RLX
static inline vuint64_t
vatomic64_get_add_rlx(vatomic64_t *a, vuint64_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "\n"
        "ldadd %x[v], %x[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic64_get_sub_rlx
 ******************************************************************************/
#ifndef VATOMIC64_GET_SUB_RLX
    #define VATOMIC64_GET_SUB_RLX
static inline vuint64_t
vatomic64_get_sub_rlx(vatomic64_t *a, vuint64_t v)
{
    vuint64_t oldv;
    __asm__ volatile(
        "neg %x[v], %x[v]\n"
        "ldadd %x[v], %x[oldv], %[a]\n"
        : [oldv] "=&r"(oldv), [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");

    return oldv;
}
#endif
/******************************************************************************
 * vatomic32_and
 ******************************************************************************/
#ifndef VATOMIC32_AND
    #define VATOMIC32_AND
static inline void
vatomic32_and(vatomic32_t *a, vuint32_t v)
{
    __asm__ volatile(
        "mvn %w[v], %w[v]\n"
        "stclrl %w[v], %[a]\n"
        : [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");
}
#endif
/******************************************************************************
 * vatomic32_or
 ******************************************************************************/
#ifndef VATOMIC32_OR
    #define VATOMIC32_OR
static inline void
vatomic32_or(vatomic32_t *a, vuint32_t v)
{
    __asm__ volatile(
        "\n"
        "stsetl %w[v], %[a]\n"
        : [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");
}
#endif
/******************************************************************************
 * vatomic32_xor
 ******************************************************************************/
#ifndef VATOMIC32_XOR
    #define VATOMIC32_XOR
static inline void
vatomic32_xor(vatomic32_t *a, vuint32_t v)
{
    __asm__ volatile(
        "\n"
        "steorl %w[v], %[a]\n"
        : [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");
}
#endif
/******************************************************************************
 * vatomic32_add
 ******************************************************************************/
#ifndef VATOMIC32_ADD
    #define VATOMIC32_ADD
static inline void
vatomic32_add(vatomic32_t *a, vuint32_t v)
{
    __asm__ volatile(
        "\n"
        "staddl %w[v], %[a]\n"
        : [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");
}
#endif
/******************************************************************************
 * vatomic32_sub
 ******************************************************************************/
#ifndef VATOMIC32_SUB
    #define VATOMIC32_SUB
static inline void
vatomic32_sub(vatomic32_t *a, vuint32_t v)
{
    __asm__ volatile(
        "neg %w[v], %w[v]\n"
        "staddl %w[v], %[a]\n"
        : [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");
}
#endif
/******************************************************************************
 * vatomic32_and_rel
 ******************************************************************************/
#ifndef VATOMIC32_AND_REL
    #define VATOMIC32_AND_REL
static inline void
vatomic32_and_rel(vatomic32_t *a, vuint32_t v)
{
    __asm__ volatile(
        "mvn %w[v], %w[v]\n"
        "stclrl %w[v], %[a]\n"
        : [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");
}
#endif
/******************************************************************************
 * vatomic32_or_rel
 ******************************************************************************/
#ifndef VATOMIC32_OR_REL
    #define VATOMIC32_OR_REL
static inline void
vatomic32_or_rel(vatomic32_t *a, vuint32_t v)
{
    __asm__ volatile(
        "\n"
        "stsetl %w[v], %[a]\n"
        : [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");
}
#endif
/******************************************************************************
 * vatomic32_xor_rel
 ******************************************************************************/
#ifndef VATOMIC32_XOR_REL
    #define VATOMIC32_XOR_REL
static inline void
vatomic32_xor_rel(vatomic32_t *a, vuint32_t v)
{
    __asm__ volatile(
        "\n"
        "steorl %w[v], %[a]\n"
        : [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");
}
#endif
/******************************************************************************
 * vatomic32_add_rel
 ******************************************************************************/
#ifndef VATOMIC32_ADD_REL
    #define VATOMIC32_ADD_REL
static inline void
vatomic32_add_rel(vatomic32_t *a, vuint32_t v)
{
    __asm__ volatile(
        "\n"
        "staddl %w[v], %[a]\n"
        : [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");
}
#endif
/******************************************************************************
 * vatomic32_sub_rel
 ******************************************************************************/
#ifndef VATOMIC32_SUB_REL
    #define VATOMIC32_SUB_REL
static inline void
vatomic32_sub_rel(vatomic32_t *a, vuint32_t v)
{
    __asm__ volatile(
        "neg %w[v], %w[v]\n"
        "staddl %w[v], %[a]\n"
        : [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");
}
#endif
/******************************************************************************
 * vatomic32_and_rlx
 ******************************************************************************/
#ifndef VATOMIC32_AND_RLX
    #define VATOMIC32_AND_RLX
static inline void
vatomic32_and_rlx(vatomic32_t *a, vuint32_t v)
{
    __asm__ volatile(
        "mvn %w[v], %w[v]\n"
        "stclr %w[v], %[a]\n"
        : [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");
}
#endif
/******************************************************************************
 * vatomic32_or_rlx
 ******************************************************************************/
#ifndef VATOMIC32_OR_RLX
    #define VATOMIC32_OR_RLX
static inline void
vatomic32_or_rlx(vatomic32_t *a, vuint32_t v)
{
    __asm__ volatile(
        "\n"
        "stset %w[v], %[a]\n"
        : [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");
}
#endif
/******************************************************************************
 * vatomic32_xor_rlx
 ******************************************************************************/
#ifndef VATOMIC32_XOR_RLX
    #define VATOMIC32_XOR_RLX
static inline void
vatomic32_xor_rlx(vatomic32_t *a, vuint32_t v)
{
    __asm__ volatile(
        "\n"
        "steor %w[v], %[a]\n"
        : [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");
}
#endif
/******************************************************************************
 * vatomic32_add_rlx
 ******************************************************************************/
#ifndef VATOMIC32_ADD_RLX
    #define VATOMIC32_ADD_RLX
static inline void
vatomic32_add_rlx(vatomic32_t *a, vuint32_t v)
{
    __asm__ volatile(
        "\n"
        "stadd %w[v], %[a]\n"
        : [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");
}
#endif
/******************************************************************************
 * vatomic32_sub_rlx
 ******************************************************************************/
#ifndef VATOMIC32_SUB_RLX
    #define VATOMIC32_SUB_RLX
static inline void
vatomic32_sub_rlx(vatomic32_t *a, vuint32_t v)
{
    __asm__ volatile(
        "neg %w[v], %w[v]\n"
        "stadd %w[v], %[a]\n"
        : [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");
}
#endif
/******************************************************************************
 * vatomic64_and
 ******************************************************************************/
#ifndef VATOMIC64_AND
    #define VATOMIC64_AND
static inline void
vatomic64_and(vatomic64_t *a, vuint64_t v)
{
    __asm__ volatile(
        "mvn %x[v], %x[v]\n"
        "stclrl %x[v], %[a]\n"
        : [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");
}
#endif
/******************************************************************************
 * vatomic64_or
 ******************************************************************************/
#ifndef VATOMIC64_OR
    #define VATOMIC64_OR
static inline void
vatomic64_or(vatomic64_t *a, vuint64_t v)
{
    __asm__ volatile(
        "\n"
        "stsetl %x[v], %[a]\n"
        : [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");
}
#endif
/******************************************************************************
 * vatomic64_xor
 ******************************************************************************/
#ifndef VATOMIC64_XOR
    #define VATOMIC64_XOR
static inline void
vatomic64_xor(vatomic64_t *a, vuint64_t v)
{
    __asm__ volatile(
        "\n"
        "steorl %x[v], %[a]\n"
        : [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");
}
#endif
/******************************************************************************
 * vatomic64_add
 ******************************************************************************/
#ifndef VATOMIC64_ADD
    #define VATOMIC64_ADD
static inline void
vatomic64_add(vatomic64_t *a, vuint64_t v)
{
    __asm__ volatile(
        "\n"
        "staddl %x[v], %[a]\n"
        : [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");
}
#endif
/******************************************************************************
 * vatomic64_sub
 ******************************************************************************/
#ifndef VATOMIC64_SUB
    #define VATOMIC64_SUB
static inline void
vatomic64_sub(vatomic64_t *a, vuint64_t v)
{
    __asm__ volatile(
        "neg %x[v], %x[v]\n"
        "staddl %x[v], %[a]\n"
        : [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");
}
#endif
/******************************************************************************
 * vatomic64_and_rel
 ******************************************************************************/
#ifndef VATOMIC64_AND_REL
    #define VATOMIC64_AND_REL
static inline void
vatomic64_and_rel(vatomic64_t *a, vuint64_t v)
{
    __asm__ volatile(
        "mvn %x[v], %x[v]\n"
        "stclrl %x[v], %[a]\n"
        : [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");
}
#endif
/******************************************************************************
 * vatomic64_or_rel
 ******************************************************************************/
#ifndef VATOMIC64_OR_REL
    #define VATOMIC64_OR_REL
static inline void
vatomic64_or_rel(vatomic64_t *a, vuint64_t v)
{
    __asm__ volatile(
        "\n"
        "stsetl %x[v], %[a]\n"
        : [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");
}
#endif
/******************************************************************************
 * vatomic64_xor_rel
 ******************************************************************************/
#ifndef VATOMIC64_XOR_REL
    #define VATOMIC64_XOR_REL
static inline void
vatomic64_xor_rel(vatomic64_t *a, vuint64_t v)
{
    __asm__ volatile(
        "\n"
        "steorl %x[v], %[a]\n"
        : [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");
}
#endif
/******************************************************************************
 * vatomic64_add_rel
 ******************************************************************************/
#ifndef VATOMIC64_ADD_REL
    #define VATOMIC64_ADD_REL
static inline void
vatomic64_add_rel(vatomic64_t *a, vuint64_t v)
{
    __asm__ volatile(
        "\n"
        "staddl %x[v], %[a]\n"
        : [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");
}
#endif
/******************************************************************************
 * vatomic64_sub_rel
 ******************************************************************************/
#ifndef VATOMIC64_SUB_REL
    #define VATOMIC64_SUB_REL
static inline void
vatomic64_sub_rel(vatomic64_t *a, vuint64_t v)
{
    __asm__ volatile(
        "neg %x[v], %x[v]\n"
        "staddl %x[v], %[a]\n"
        : [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");
}
#endif
/******************************************************************************
 * vatomic64_and_rlx
 ******************************************************************************/
#ifndef VATOMIC64_AND_RLX
    #define VATOMIC64_AND_RLX
static inline void
vatomic64_and_rlx(vatomic64_t *a, vuint64_t v)
{
    __asm__ volatile(
        "mvn %x[v], %x[v]\n"
        "stclr %x[v], %[a]\n"
        : [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");
}
#endif
/******************************************************************************
 * vatomic64_or_rlx
 ******************************************************************************/
#ifndef VATOMIC64_OR_RLX
    #define VATOMIC64_OR_RLX
static inline void
vatomic64_or_rlx(vatomic64_t *a, vuint64_t v)
{
    __asm__ volatile(
        "\n"
        "stset %x[v], %[a]\n"
        : [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");
}
#endif
/******************************************************************************
 * vatomic64_xor_rlx
 ******************************************************************************/
#ifndef VATOMIC64_XOR_RLX
    #define VATOMIC64_XOR_RLX
static inline void
vatomic64_xor_rlx(vatomic64_t *a, vuint64_t v)
{
    __asm__ volatile(
        "\n"
        "steor %x[v], %[a]\n"
        : [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");
}
#endif
/******************************************************************************
 * vatomic64_add_rlx
 ******************************************************************************/
#ifndef VATOMIC64_ADD_RLX
    #define VATOMIC64_ADD_RLX
static inline void
vatomic64_add_rlx(vatomic64_t *a, vuint64_t v)
{
    __asm__ volatile(
        "\n"
        "stadd %x[v], %[a]\n"
        : [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");
}
#endif
/******************************************************************************
 * vatomic64_sub_rlx
 ******************************************************************************/
#ifndef VATOMIC64_SUB_RLX
    #define VATOMIC64_SUB_RLX
static inline void
vatomic64_sub_rlx(vatomic64_t *a, vuint64_t v)
{
    __asm__ volatile(
        "neg %x[v], %x[v]\n"
        "stadd %x[v], %[a]\n"
        : [v] "+&r"(v)
        : [a] "Q"(a->_v)
        : "memory", "cc");
}
#endif
#endif
